<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--Spring中的依赖注入
        注意:如果是经常变化的数据，并不适用于注入的方式
        依赖注入: Dependency Injection
        IOC的作用:降低程序间的耦合(依赖关系)
        依赖关系管理:以后都交由Spring来维护，在以前类需要用到其他类的对象，由Spring为我们提供，我们只需要在
                   配置文件中说明依赖关系的维护(就称之为依赖注入)。
        依赖注入:能注入的数据(有三类)
                1.基本数据和String
                2.其他bean类型(在配置文件中或者注解配置过的bean)
                3.复杂类型/集合类型
           注入的方式:(有三种)
                1.使用构造函数提供
                2.使用set方法提供
                3.使用注解提供
    -->
    <!--构造函数注入
        使用的标签:constructor-org
        标签出现的位置:bean标签内部
        标签中的属性:
                   type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型。
                   index:用于指定要注入的数据给构造函数中指定索引位置的参数赋值。参数索引的位置从0开始。
                   name:用于指定给构造函数中指定名称的参数赋值。(常用的)
                 ============================以上三个用于指定给构造函数中哪个参数赋值=======================
                   value:用于提供基本数据类型和String数据类型的数据。
                   ref:用于指定其他的bean类型数据，指的是在Springd的Ioc核心容器中出现过的bean对象。
        优势:在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端:改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="景文博"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <!--配置一个日期对象-->
    <bean id="now" class="java.util.Date"></bean>
    <!--set方法注入(常用方式)
        涉及的标签:property
        出现的位置:bean标签的内部
        标签的属性:
                  name:用于指定注入时所调用的set方法名称。
                  value:用于提供基本数据类型和String数据类型的数据。
                  ref:用于指定其他的bean类型数据，指的是在Springd的Ioc核心容器中出现过的bean对象。
        优势:创建对象时没有明确的限制，可以直接使用默认的构造函数。
        弊端:如果有某个成员必须有值，则获取对象时有可能set方法没有执行。
    -->
    <bean id="accountService1" class="com.itheima.service.impl.AccountServiceImpl1">
        <property name="name" value="翠花"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>
    <!--复杂/集合类型的注入
        用于给List结构集合注入的标签:list array set
        用于给Map结构集合注入的标签:map props
        结构相同，标签可以互换
    -->
    <bean id="accountService2" class="com.itheima.service.impl.AccountServiceImpl2">
        <property name="myStr">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB" value="bbb"></entry>
                <entry key="testC">
                    <value>ccc</value>
                </entry>
            </map>
        </property>
        <property name="myProps">
            <props>
               <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>
    </bean>
</beans>










